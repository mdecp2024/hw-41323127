<h1>First</h1>
<p><br/><br/>About</p>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:https://github.com/mdecp2024/hw-41323127</p>
<p>個人網站:https://github.com/41323127</p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OSn_-WlS4gc" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/pvN4Kf_e9U0" width="560"></iframe></p>
<p>題目二:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fzgbm7uGYBA" width="560"></iframe></p>
<p>題目三:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iwJq7r1niZ4" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>題目一</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RIk9yLTClGw" width="560"></iframe></p>
<p>題目二</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/j4USvG4NFBk" width="560"></iframe></p>
<h3>w12</h3>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 5 # 總共的行數
space ="_"
'''
for in range(n): # 對於每一行
    # 印出空格
    print(space * (n - i -1), end=' ')
'''
"""
for i in range(n): # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end=' ')
"""
for i in range(n): # 對於每一行
    #印出空格
    #print(space * (n - i - 1), end=' ')
    print("目前的數字為 " +str(i))</pre>
<p><br/><br/></p>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/VvVZI1w1-mg" width="560"></iframe></p>
<h3>w12_hw</h3>
<p><span style="color: #0000ff;">第一題</span>:<a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/c05a29b5ae067803a84fb858b8336f3d/raw/582ca25be452e231e8bcdd3ff78db6ddf56e3a1a/wh_w12hw1.py">01_string_i...ut_print.zip</a></p>
<p><span style="color: #ff0000;">說明</span>:學習如何處理和輸出字符串,還有如何處理input(),print().最後學習如何創建簡單的 ASCII 藝術。</p>
<p><span style="color: #0000ff;">第二題</span>:<a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/5436f46f64ab4f485a18b37e48e828c6/raw/764f532cf433e67d5d852f9e37662ea7bffb0fda/wh_12hw2.py">02_variables.zip</a></p>
<p><span style="color: #ff0000;"><span style="color: #000000;"><span style="color: #ff0000;">說明</span>:<span>這段程式碼的目的是讓你了解如何與用戶互動，並將他們的輸入與其他文本合併輸出。</span></span>   </span></p>
<p><span style="color: #0000ff;">第三題</span>:<a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/cdcac0bdaf8af3ce25d73b0562db456a/raw/5781ac5a0d57769fc6a91b9910b753bb82b965bc/wh_12hw3.py">03_list_if_in_else.zip</a></p>
<p><span style="color: #ff0000;">說明</span>:</p>
<div class="flex-1 overflow-hidden @container/thread">
<div class="h-full">
<div class="react-scroll-to-bottom--css-lhfwt-79elbk h-full">
<div class="react-scroll-to-bottom--css-lhfwt-1n7m0yu">
<div class="flex flex-col text-sm md:pb-9">
<article class="w-full scroll-mb-[var(--thread-trailing-height,150px)] text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-13" dir="auto">
<div class="m-auto text-base py-[18px] px-3 md:px-4 w-full md:px-5 lg:px-4 xl:px-5">
<div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="71a3ca65-b443-4722-b0f7-bf006e4b90a2" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>這段程式碼模擬了一個書店的簡單查詢系統，顧客可以選擇想要購買的程式設計書籍，然後系統會檢查書店是否有這本書。如果有，就告訴顧客書店有賣；如果沒有，就告訴顧客書店沒有這本書。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</article>
</div>
</div>
</div>
</div>
</div>
<div class="flex-1 overflow-hidden @container/thread">
<div class="h-full">
<div class="react-scroll-to-bottom--css-lhfwt-79elbk h-full">
<div class="react-scroll-to-bottom--css-lhfwt-1n7m0yu">
<div class="flex flex-col text-sm md:pb-9">
<article class="w-full scroll-mb-[var(--thread-trailing-height,150px)] text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-13" dir="auto">
<div class="m-auto text-base py-[18px] px-3 md:px-4 w-full md:px-5 lg:px-4 xl:px-5">
<div class="m-auto text-base py-[18px] px-3 md:px-4 w-full md:px-5 lg:px-4 xl:px-5">
<div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="71a3ca65-b443-4722-b0f7-bf006e4b90a2" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p><span style="color: #0000ff;">第四題</span>:<a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/fa48179f5798f25a6586df9317ebb77e/raw/5ce0f3979ebb4befb2fec5357e05b75c193e2cb2/wh_12hw4.py">04_list_ap..._remove.zip</a></p>
<p><span style="color: #ff0000;">說明</span>:學習</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<li>使用 <code>input()</code> 向自己詢問並更新購物清單。</li>
<li>使用 <code>append()</code> 方法將新物品添加到清單中。</li>
<li>使用 <code>remove()</code> 方法從清單中移除物品。</li>
<div class="m-auto text-base py-[18px] px-3 md:px-4 w-full md:px-5 lg:px-4 xl:px-5">
<div class="m-auto text-base py-[18px] px-3 md:px-4 w-full md:px-5 lg:px-4 xl:px-5">
<div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="71a3ca65-b443-4722-b0f7-bf006e4b90a2" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p><span style="color: #0000ff;">第五題</span>:<a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/9b5d3f772a84f5d8c61f169af698f77c/raw/24ce1c72570d1d4d030bd4cb10daddc5f38ac526/wh_12hw5.py">05_list_ind...p_insert.zip</a></p>
<p><span style="color: #ff0000;">說明</span>:學習</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<li>使用 <code>.index()</code> 查找項目在列表中的位置。</li>
<li>使用 <code>.pop()</code> 移除列表中的項目。</li>
<li>使用 <code>.insert()</code> 在列表的特定位置插入新項目。</li>
</article>
</div>
</div>
</div>
</div>
</div>
<p><span style="color: #0000ff;">第六題</span>:<a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/6b64aa72e302c4f939df73f0eb0e6f4a/raw/537c298b49944dfb3271ba7207dc4f4a40e48bc0/wh_12hw6.py">06_list_slicing.zip</a></p>
<p><span style="color: #ff0000;">說明</span>:學習</p>
<ul>
<li>使用正索引和負索引來選擇特定的項目。</li>
<li>使用步長來選擇每隔一個的項目。</li>
<li>可以對列表進行反向排序。</li>
</ul>
<p></p><h3>w13_hw</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 創建畫布元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
# 定義圓心中心座標和半徑
x1, y1 = 200, 200  # 第一個圓的中心座標
x2, y2 = 300, 300  # 第二個圓的中心座標
radius = 141.4  # 圓的半徑
 
ctx = canvas.getContext("2d")
 
# 繪製第一個圓 (黑色邊框)
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "orange"  # 圓的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "darkred"  # 圓的邊框顏色
ctx.stroke()
 
# 繪製第二個圓 (黑色邊框)
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "mediumaquamarine"  # 圓的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "darkgreen"  # 圓的邊框顏色
ctx.stroke()
 
# 填充第一個和第二個圓的交集區域
ctx.save()
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 剪裁到第一個圓
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "deepskyblue"  # 交集區域填充顏色
ctx.fill()
ctx.restore()

# 1. 繪製第一個正方形 (紅色邊框，紫色填充)
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.fillStyle = "mediumpurple"  # 第一個正方形的填充顏色
ctx.fill()
ctx.lineWidth = 2
ctx.strokeStyle = "crimson"  # 第一個正方形的邊框顏色
ctx.stroke()

# 2. 繪製第二個正方形 (紅色邊框，粉色填充)
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.fillStyle = "lightpink"  # 第二個正方形的填充顏色
ctx.fill()
ctx.strokeStyle = "firebrick"  # 第二個正方形的邊框顏色
ctx.stroke()

# 3. 繪製斜線 (藍色)
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.strokeStyle = "royalblue"
ctx.lineWidth = 2
ctx.stroke()

# 4. 填充由方框和對角線劃分的區域

# 繪製第一個方框內部的區域（藍色區域）
ctx.fillStyle = "lightblue"
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形
ctx.fill()

# 繪製第二個方框內部的區域（黃色區域）
ctx.fillStyle = "yellow"
ctx.beginPath()
ctx.rect(200, 200, 200, 200)  # 第二個正方形
ctx.fill()

# 填充斜線劃分的區域
ctx.fillStyle = "green"
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點
ctx.lineTo(300, 300)  # 斜線終點
ctx.lineTo(300, 100)  # 矩形的右上角
ctx.closePath()
ctx.fill()

# 確保保留所有邊界
ctx.strokeStyle = "crimson"  # 保留第一個方框邊框
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.stroke()

ctx.strokeStyle = "firebrick"  # 保留第二個方框邊框
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.stroke()

ctx.strokeStyle = "royalblue"  # 保留藍色斜線
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 保留圓形邊框
ctx.strokeStyle = "darkred"  # 保留第一個圓邊框
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.stroke()

ctx.strokeStyle = "darkgreen"  # 保留第二個圓邊框
ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.stroke()
</script>
<h3>w15</h3>
<p><a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/538ff31ec5ecfe251c2ad24bb5d58f9a/raw/302977d411668f4d75af96df254b159360955eee/wh_15hw.py">anchor</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 計算從 1 累加到 100 的總和
total = sum(range(1, 101)) #總數 = 加範圍(1,101)
print(total) #印出(總數
</pre>
<p><a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/c2b85371b33b4adde02eaabd92cd680a/raw/91e1d287479cff188970fe04ab145c61f466094b/wh_15.py"> addto</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):# 定義一個 addto 的函式
    total = 0 
    for i in range(start, end + 1):  # 從 strat 到  end 累加
        total += i #總數加起來等於 i
    return total #迴圈總數

# 測試函式
result = addto(1, 100)
print(result)  # 輸出: 5050
</pre>
<p><a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/0300b14cc33761f135646ae38be5f406/raw/65a04c7860ecf0fdb33485066cb511e2bd97d070/wh_15.py">add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end): #定義一個 add_only_even 的函式
    total = 0  # 初始化總和變數
    for i in range(start, end + 1):  # 遍歷從 start 到 end 的所有數字
        if i % 2 == 0:  # 判斷 i 是否為偶數
            total += i  # 如果是偶數，就累加到 total
    return total  # 返回偶數的總和

# 測試函式
result = add_only_even(1, 100)  # 計算從 1 到 100 的偶數總和
print(result)  # 輸出結果
</pre>
<p><a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/60a901c3138eab9e7937946e2bd24c0a/raw/725674bb181d63d8fb9d5d621cdfc4e2fa303597/wh_15%25E5%259B%259B.py">add_avoid_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    total = 0  # 初始化總和變數
    for i in range(start, end + 1):  # 遍歷從 start 到 end 的所有數字
        if '8' not in str(i):  # 判斷數字 i 是否包含 "8"
            total += i  # 如果不包含 "8"，就累加到 total
    return total  # 返回不包含 "8" 的數字總和

# 測試函式
result = add_avoid_8(1, 100)  # 計算從 1 到 100 的數字總和，避開包含 "8" 的數字
print(result)  # 輸出結果
</pre>
<p><a href="https://mdecp2024.github.io/hw-41323127/content/Brython.html?src=https://gist.githubusercontent.com/41323127/0d76644b9a05b0cbc21990987882e6c4/raw/918285bb1ed4a86f0432c5c3d24a517eefb52a69/wh_w15%25E4%25BA%2594.py">add_avoid_3,8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_3_8(start, end):
    total = 0
    for num in range(start, end + 1):
        # 檢查數字是否包含 '3' 或 '8'
        if '3' not in str(num) and '8' not in str(num):
            total += num
    return total

# 計算從 1 到 100 的結果
result = add_avoid_3_8(1, 100)
print(result)
</pre>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>